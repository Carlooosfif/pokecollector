// tests/functional-example.ts
/**
 * PRUEBAS FUNCIONALES DE EJEMPLO
 * 
 * Estas son pruebas manuales que puedes ejecutar para verificar 
 * que el sistema funciona correctamente. En un entorno real,
 * estas se automatizar√≠an con Jest/Mocha.
 */

// ===================================================================
// PRUEBA FUNCIONAL 1: GESTI√ìN DE USUARIOS Y AUTENTICACI√ìN
// ===================================================================

/**
 * OBJETIVO: Verificar que el sistema de autenticaci√≥n funciona correctamente
 * 
 * CASOS DE PRUEBA:
 * 1. Registrar nuevo usuario
 * 2. Iniciar sesi√≥n con credenciales v√°lidas
 * 3. Acceder a endpoint protegido con token v√°lido
 * 4. Intentar acceder sin token (debe fallar)
 * 5. Actualizar perfil de usuario
 */

const TEST_1_USER_AUTHENTICATION = {
  title: "Gesti√≥n de Usuarios y Autenticaci√≥n",
  
  async execute() {
    console.log("üß™ PRUEBA FUNCIONAL 1: Gesti√≥n de Usuarios y Autenticaci√≥n");
    console.log("=" .repeat(60));
    
    const baseUrl = 'http://localhost:3001/api';
    
    try {
      // PASO 1: Registrar nuevo usuario
      console.log("\nüìù PASO 1: Registrando nuevo usuario...");
      const registerResponse = await fetch(`${baseUrl}/auth/register`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          username: 'test_trainer',
          email: 'test@pokecollector.com',
          password: 'test123456'
        })
      });
      
      const registerData = await registerResponse.json();
      console.log("‚úÖ Registro exitoso:", registerData.success);
      
      // PASO 2: Iniciar sesi√≥n
      console.log("\nüîê PASO 2: Iniciando sesi√≥n...");
      const loginResponse = await fetch(`${baseUrl}/auth/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          email: 'test@pokecollector.com',
          password: 'test123456'
        })
      });
      
      const loginData = await loginResponse.json();
      console.log("‚úÖ Login exitoso:", loginData.success);
      const token = loginData.data.token;
      
      // PASO 3: Acceder a endpoint protegido
      console.log("\nüîí PASO 3: Accediendo a perfil (endpoint protegido)...");
      const profileResponse = await fetch(`${baseUrl}/users/profile`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      const profileData = await profileResponse.json();
      console.log("‚úÖ Perfil obtenido:", profileData.success);
      console.log("üë§ Usuario:", profileData.data.username);
      
      // PASO 4: Intentar acceso sin token
      console.log("\nüö´ PASO 4: Intentando acceso sin token (debe fallar)...");
      const noTokenResponse = await fetch(`${baseUrl}/users/profile`);
      const noTokenData = await noTokenResponse.json();
      console.log("‚úÖ Acceso denegado correctamente:", !noTokenData.success);
      
      // PASO 5: Actualizar perfil
      console.log("\n‚úèÔ∏è PASO 5: Actualizando perfil...");
      const updateResponse = await fetch(`${baseUrl}/users/profile`, {
        method: 'PUT',
        headers: { 
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          username: 'test_trainer_updated'
        })
      });
      
      const updateData = await updateResponse.json();
      console.log("‚úÖ Perfil actualizado:", updateData.success);
      console.log("üë§ Nuevo username:", updateData.data.username);
      
      console.log("\nüéâ PRUEBA 1 COMPLETADA EXITOSAMENTE");
      
    } catch (error) {
      console.error("‚ùå Error en la prueba:", error);
    }
  }
};

// ===================================================================
// PRUEBA FUNCIONAL 2: GESTI√ìN DE COLECCI√ìN DE CARTAS
// ===================================================================

/**
 * OBJETIVO: Verificar que la gesti√≥n de colecciones funciona correctamente
 * 
 * CASOS DE PRUEBA:
 * 1. Listar √°lbumes disponibles
 * 2. Obtener cartas de un √°lbum espec√≠fico
 * 3. Agregar carta a la colecci√≥n del usuario
 * 4. Ver colecci√≥n personal
 * 5. Actualizar cantidad de una carta
 * 6. Ver ranking de usuarios
 */

const TEST_2_CARD_COLLECTION = {
  title: "Gesti√≥n de Colecci√≥n de Cartas",
  
  async execute() {
    console.log("\nüß™ PRUEBA FUNCIONAL 2: Gesti√≥n de Colecci√≥n de Cartas");
    console.log("=" .repeat(60));
    
    const baseUrl = 'http://localhost:3001/api';
    
    try {
      // Login con usuario de prueba
      console.log("\nüîê Iniciando sesi√≥n con usuario existente...");
      const loginResponse = await fetch(`${baseUrl}/auth/login`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          email: 'ash@pokecollector.com',
          password: 'user123'
        })
      });
      
      const loginData = await loginResponse.json();
      const token = loginData.data.token;
      console.log("‚úÖ Login exitoso como:", loginData.data.user.username);
      
      // PASO 1: Listar √°lbumes
      console.log("\nüìö PASO 1: Obteniendo lista de √°lbumes...");
      const albumsResponse = await fetch(`${baseUrl}/albums`);
      const albumsData = await albumsResponse.json();
      console.log("‚úÖ √Ålbumes obtenidos:", albumsData.data.length);
      
      const firstAlbum = albumsData.data[0];
      console.log("üìñ Primer √°lbum:", firstAlbum.name, "- Generaci√≥n", firstAlbum.generation);
      
      // PASO 2: Obtener cartas del √°lbum
      console.log("\nüÉè PASO 2: Obteniendo cartas del √°lbum...");
      const cardsResponse = await fetch(`${baseUrl}/cards/album/${firstAlbum.id}`);
      const cardsData = await cardsResponse.json();
      console.log("‚úÖ Cartas obtenidas:", cardsData.data.length);
      
      const firstCard = cardsData.data[0];
      console.log("üé¥ Primera carta:", firstCard.name, "- Rareza:", firstCard.rarity);
      
      // PASO 3: Agregar carta a colecci√≥n
      console.log("\n‚ûï PASO 3: Agregando carta a la colecci√≥n...");
      const addCardResponse = await fetch(`${baseUrl}/cards/collection`, {
        method: 'POST',
        headers: { 
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          cardId: firstCard.id,
          quantity: 2
        })
      });
      
      const addCardData = await addCardResponse.json();
      console.log("‚úÖ Carta agregada:", addCardData.success);
      
      // PASO 4: Ver colecci√≥n personal
      console.log("\nüéí PASO 4: Obteniendo colecci√≥n personal...");
      const collectionResponse = await fetch(`${baseUrl}/cards/collection/my`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      const collectionData = await collectionResponse.json();
      console.log("‚úÖ Colecci√≥n obtenida:", collectionData.data.length, "cartas");
      
      // PASO 5: Obtener estad√≠sticas del usuario
      console.log("\nüìä PASO 5: Obteniendo estad√≠sticas del usuario...");
      const statsResponse = await fetch(`${baseUrl}/users/stats`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      const statsData = await statsResponse.json();
      console.log("‚úÖ Estad√≠sticas obtenidas:");
      console.log("   - Cartas totales:", statsData.data.totalCards);
      console.log("   - Cartas √∫nicas:", statsData.data.uniqueCards);
      console.log("   - Completaci√≥n:", statsData.data.completionPercentage + "%");
      
      // PASO 6: Ver ranking
      console.log("\nüèÜ PASO 6: Obteniendo ranking de usuarios...");
      const rankingResponse = await fetch(`${baseUrl}/users/ranking`);
      const rankingData = await rankingResponse.json();
      console.log("‚úÖ Ranking obtenido:", rankingData.data.length, "usuarios");
      
      console.log("ü•á Top 3:");
      rankingData.data.slice(0, 3).forEach((user: any, index: number) => {
        console.log(`   ${index + 1}. ${user.username} - ${user.completionPercentage}% completado`);
      });
      
      console.log("\nüéâ PRUEBA 2 COMPLETADA EXITOSAMENTE");
      
    } catch (error) {
      console.error("‚ùå Error en la prueba:", error);
    }
  }
};

// ===================================================================
// FUNCIONES DE UTILIDAD PARA EJECUTAR PRUEBAS
// ===================================================================

/**
 * Ejecutar todas las pruebas funcionales
 */
async function runAllFunctionalTests() {
  console.log("üöÄ INICIANDO PRUEBAS FUNCIONALES DEL SISTEMA");
  console.log("=" .repeat(80));
  
  try {
    await TEST_1_USER_AUTHENTICATION.execute();
    await new Promise(resolve => setTimeout(resolve, 1000)); // Pausa de 1 segundo
    await TEST_2_CARD_COLLECTION.execute();
    
    console.log("\n" + "=" .repeat(80));
    console.log("üéâ TODAS LAS PRUEBAS FUNCIONALES COMPLETADAS EXITOSAMENTE");
    console.log("=" .repeat(80));
    
  } catch (error) {
    console.error("‚ùå Error ejecutando las pruebas:", error);
  }
}

/**
 * Ejecutar una prueba espec√≠fica
 */
async function runSpecificTest(testNumber: number) {
  switch (testNumber) {
    case 1:
      await TEST_1_USER_AUTHENTICATION.execute();
      break;
    case 2:
      await TEST_2_CARD_COLLECTION.execute();
      break;
    default:
      console.log("‚ùå N√∫mero de prueba inv√°lido. Usa 1 o 2.");
  }
}

// ===================================================================
// INSTRUCCIONES DE USO
// ===================================================================

/**
 * C√ìMO EJECUTAR ESTAS PRUEBAS:
 * 
 * 1. Aseg√∫rate de que el servidor est√© corriendo en http://localhost:3001
 * 2. Ejecuta el seed para tener datos de prueba: npm run db:seed
 * 3. Copia este c√≥digo en un archivo .ts o .js
 * 4. Ejecuta con: ts-node tests/functional-example.ts
 * 
 * O ejecuta las funciones individualmente:
 * - runAllFunctionalTests() - Ejecutar todas las pruebas
 * - runSpecificTest(1) - Solo la prueba de autenticaci√≥n
 * - runSpecificTest(2) - Solo la prueba de colecci√≥n
 */

// Exportar para uso externo
export {
  TEST_1_USER_AUTHENTICATION,
  TEST_2_CARD_COLLECTION,
  runAllFunctionalTests,
  runSpecificTest
};

// Ejecutar todas las pruebas si este archivo se ejecuta directamente
if (require.main === module) {
  runAllFunctionalTests();
}